total_grid_points :: 1000, 1000
block_shape :: 100,100

// ! Currently, float is partially supported.
// (Type inferencing is incomplete.)
// To compare with Halide, we generate double variables as float ones by modifying the template.

global double q
double dx = 1.0/total_grid_points.1
double dt = 0.0001*dx

diff = fun(q) dt/dx/dx*(q[+1,0] + q[-1,0] + q[0, +1] + q[0, -1] - 4*q[0,0])

init
  c1 = i1 - (total_grid_points.1 / 2)
  c2 = i2 - (total_grid_points.2 / 2)
  q = if (c1 * c1 + c2 * c2) < 100 then 1.0 else 0.0
end

step 5,5:(total_grid_points.1-5),(total_grid_points.2-5)
  k1 = diff(q)
  k2 = diff(q + k1/2)
  k3 = diff(q + k2/2)
  k4 = diff(q + k3)
  q = q + (k1 / 6 + k2 / 3 + k3 / 3 + k4 / 6)
end

step 5,0:total_grid_points.1,5
  k1 = 0.0
  k2 = 0.0
  k3 = 0.0
  k4 = 0.0
  q = 0.0
end
step total_grid_points.1-5,5:total_grid_points.1,total_grid_points.2
  k1 = 0.0
  k2 = 0.0
  k3 = 0.0
  k4 = 0.0
  q = 0.0
end
step 0,total_grid_points.2-5:total_grid_points.1-5,total_grid_points.2
  k1 = 0.0
  k2 = 0.0
  k3 = 0.0
  k4 = 0.0
  q = 0.0
end
step 0,0:5,total_grid_points.2-5
  k1 = 0.0
  k2 = 0.0
  k3 = 0.0
  k4 = 0.0
  q = 0.0
end